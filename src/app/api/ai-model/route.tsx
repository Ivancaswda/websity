import { NextRequest, NextResponse } from "next/server";
import getServerUser from "@/lib/auth-server";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { PROMPT } from "@/app/prompt"; // –∏–º–ø–æ—Ä—Ç —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

const GEMINI_API_KEY = process.env.GEMINI_API_KEY!;

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ JSON (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—ë—Ç —Å ```json)
export function cleanJSON(content: string) {
    return content
        .replace(/```json/g, "")
        .replace(/```/g, "")
        .replace(/\r?\n|\r/g, "")
        .trim();
}

export function safeParseJSON(jsonString: string) {
    const cleaned = cleanJSON(jsonString);
    try {
        return { ok: true, data: JSON.parse(cleaned) };
    } catch (error: any) {
        return { ok: false, raw: jsonString, error: error.message };
    }
}

export async function POST(req: NextRequest) {
    try {
        const { messages } = await req.json();
        const user = await getServerUser();

        if (!user) {
            return NextResponse.json({ error: "Not authorized" }, { status: 401 });
        }

        if (user.credits <= 0) {
            return NextResponse.json(
                { error: "Free limit exceeded", redirect: "/premium" },
                { status: 403 }
            );
        }

        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

        // –ü—Ä–æ–º–ø—Ç + —Å–æ–æ–±—â–µ–Ω–∏—è
        const fullPrompt = [
            { role: "system", content: PROMPT },
            ...messages.map((m: any) => ({ role: m.role, content: m.content })),
        ];

        console.log("üß† Full prompt:", fullPrompt);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        const result = await model.generateContent(
            fullPrompt.map((m) => m.content).join("\n")
        );

        const text = result.response.text();

        // Gemini –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∞ –Ω–µ JSON, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É
        return NextResponse.json({ content: text });
    } catch (err: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /api/ai-model:", err);

        if (err?.response?.status === 429) {
            return NextResponse.json(
                {
                    error: "üö¶ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ API-–∫–ª—é—á –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    code: "QUOTA_EXCEEDED",
                },
                { status: 429 }
            );
        }

        return NextResponse.json({ error: err?.message || err }, { status: 500 });
    }
}
